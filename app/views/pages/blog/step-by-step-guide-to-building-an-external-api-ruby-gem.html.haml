- @title = "Guide to Building Your First Ruby Gem using a Third Party API"
- @metadescription = "I had to build a gem for a postal mailing API. Here's how I did it."
.row
  .small-12.column
    %h1.centered{:style =>"font-size: 36px;"} How to Build Your First Ruby Gem using a Third Party API
    %p Published: January 19, 2015
    %hr
    %h3 A Little Backstory
    %p
      I own a business called
      %a{:href => "http://boostfitnessmarketing.com/fitnesstexter", :target => "_blank"}FitnessTexter.
      We set up text message marketing campaigns for fitness businesses. Once we have their campaign up and running,
      we send them 3 PDF window signs in the mail. Printing these window signs and mailing them used to be a tedious job.
      I had to walk to Kinkos, print off the signs, fold and stuff them in an envelope, and then drop the envelope in
      a mail box. Normally, this would take about 45 minutes from start to finish. Doing this 5 days per week got to be a
      problem. I decided to find a postal mail API that would solve my problems.
    %p
      After doing a bit of Googling, I found
      %a{:href => "http://trypaper.com", :target => "_blank"}TryPaper.com.
      They offered a RESTful API, but didn't have a working Ruby gem to use. In order to quickly start using their service,
      I decided to write a simple Ruby script that I could run from the command line.
    %p
      Below is a PasteBin of the Ruby script that I was running from command line. It's quite simple.
    %ul.no-bullet
      %li 1. Run 'ruby uploader.rb' in the command line.
      %li 2. It prints out a list of all the PDF files in the current directory. Every time I complete a customer's PDF file, I add it to this directory and then delete it after sending.
      %li 3. Per TryPaper API requirements, Ruby reads the file, converts it to a Base64 string, and loads it into a variable.
      %li 3. It prompts for all the address requirements and stores them in local variables.
      %li 4. After completing all the address inputs, it confirms the correct mailing address.
      %li 5. If it's wrong, type "N" and the address entry loop restarts. If address is correct, it makes an HTTP POST to the TryPaper API.
      %li 6. The POST header contains producion API key for billing purposes. Request body contains recipient address, return address ID (from TryPaper dashboard), and Base64 encoded file.
      %li 7. TryPaper receives file and sends back a 201 or 404. Wah-lah! API success!
      %li 8. The second HTTP POST deals with printing(spooling) my documents. It basically takes the body from the TryPaper API response and says, "Hey, print this document immediately instead of waiting 12 hours to auto-spool it."
    %p.centered
      %img{:src => "https://drive.google.com/uc?id=0BwSA_JYWKK3IOElUZThmWUZReUU", :style => "width: 60%" }
    %p
      <iframe src="http://pastebin.com/embed_iframe.php?i=RUKHSU52" style="border:none;width:100%;height:400px;"></iframe>
    %hr
    %p
      However, I wasn't happy with just having a local Ruby script. I'm a strong believer in open source code. I've benefited immensely from numerous open source projects *cough* Rails *cough*, and I wanted to give back to the community.
    %p
      Therefore, I set out on creating my first legit open source gem. I emailed the team at TryPaper(mostly .NET guys) and told them I wanted to build them a gem. Their product had saved my business countless hours and I felt like they deserved a gem so more Ruby devs could implement their API. They were stoked and said they couldn't wait to see the finished product.
    %hr
    %h3 Building a Ruby Gem for an External 3rd Party API
    %hr